use std::{
    fs::OpenOptions,
    io::Read,
    path::{Path, PathBuf},
    process::Command,
    str::FromStr,
};

use log::{error, info, warn};
use pci_device::{DiscreetGpu, GfxVendor};

use crate::{error::GfxError, pci_device::GfxMode, special_asus::*};

/// The configuration for graphics. This should be saved and loaded on boot.
pub mod config;
mod config_old;
/// Control functions for setting graphics.
pub mod controller;
/// Error: 404
pub mod error;
/// Special-case functions for check/read/write of key functions on unique laptops
/// such as the G-Sync mode available on some ASUS ROG laptops
pub mod special_asus;

/// Defined DBUS Interface for supergfxctl
pub mod zbus_iface;
/// Defined DBUS Proxy for supergfxctl
pub mod zbus_proxy;

/// System interface helpers.
pub mod pci_device;

/// Helper to expose the current crate version to external code
pub const VERSION: &str = env!("CARGO_PKG_VERSION");
/// Generic path that is used to save the daemon config state
pub const CONFIG_PATH: &str = "/etc/supergfxd.conf";
/// Destination name to be used in the daemon when setting up DBUS connection
pub const DBUS_DEST_NAME: &str = "org.supergfxctl.Daemon";
/// Interface path name. Should be common across daemon and client.
pub const DBUS_IFACE_PATH: &str = "/org/supergfxctl/Gfx";

pub const KERNEL_CMDLINE: &str = "/proc/cmdline";

const NVIDIA_DRIVERS: [&str; 4] = ["nvidia_drm", "nvidia_modeset", "nvidia_uvm", "nvidia"];

const VFIO_DRIVERS: [&str; 6] = [
    "vfio_pci",
    "vfio_pci_core",
    "vfio_iommu_type1",
    "vfio_virqfd",
    "vfio_mdev",
    "vfio",
];

const DISPLAY_MANAGER: &str = "display-manager.service";

const MODPROBE_PATH: &str = "/etc/modprobe.d/supergfxd.conf";

static MODPROBE_NVIDIA_BASE: &[u8] = br#"# Automatically generated by supergfxd
blacklist nouveau
alias nouveau off
options nvidia NVreg_DynamicPowerManagement=0x02
"#;

static MODPROBE_NVIDIA_DRM_MODESET: &[u8] = br#"
options nvidia-drm modeset=1
"#;

static MODPROBE_INTEGRATED: &[u8] = br#"# Automatically generated by supergfxd
blacklist i2c_nvidia_gpu
blacklist nvidia
blacklist nvidia-drm
blacklist nvidia-modeset
blacklist nouveau
alias nouveau off
"#;

static MODPROBE_VFIO: &[u8] = br#"options vfio-pci ids="#;

/// Basic check for support. If `()` returned everything is kosher.
fn mode_support_check(mode: &GfxMode, dgpu: &DiscreetGpu) -> Result<(), GfxError> {
    if matches!(mode, GfxMode::Egpu) && !asus_egpu_exists() {
        let text = "Egpu mode requested when either the laptop doesn't support it or the kernel is not recent enough".to_string();
        return Err(GfxError::NotSupported(text));
    }

    if matches!(mode, GfxMode::Compute) && dgpu.is_amd() {
        let text = "Compute mode unsupported on AMD dGPU systems".to_string();
        return Err(GfxError::NotSupported(text));
    }

    Ok(())
}

/// Add or remove driver modules
fn do_driver_action(driver: &str, action: &str) -> Result<(), GfxError> {
    let mut cmd = Command::new(action);
    cmd.arg(driver);

    let mut count = 0;
    const MAX_TRIES: i32 = 6;
    loop {
        if count > MAX_TRIES {
            let msg = format!("{} {} failed for unknown reason", action, driver);
            error!("{}", msg);
            return Ok(()); //Err(GfxError::Modprobe(msg));
        }

        let output = cmd
            .output()
            .map_err(|err| GfxError::Command(format!("{:?}", cmd), err))?;
        if !output.status.success() {
            if output
                .stderr
                .ends_with("is not currently loaded\n".as_bytes())
            {
                return Ok(());
            }
            if output.stderr.ends_with("is builtin.\n".as_bytes()) {
                return Err(GfxError::VfioBuiltin);
            }
            if output.stderr.ends_with("Permission denied\n".as_bytes()) {
                warn!(
                    "{} {} failed: {:?}",
                    action,
                    driver,
                    String::from_utf8_lossy(&output.stderr)
                );
                warn!("It may be safe to ignore the above error, run `lsmod |grep {}` to confirm modules loaded", driver);
                return Ok(());
            }
            if String::from_utf8_lossy(&output.stderr)
                .contains(&format!("Module {} not found", driver))
            {
                return Err(GfxError::MissingModule(driver.into()));
            }
            if count >= MAX_TRIES {
                let msg = format!(
                    "{} {} failed: {:?}",
                    action,
                    driver,
                    String::from_utf8_lossy(&output.stderr)
                );
                return Err(GfxError::Modprobe(msg));
            }
        } else if output.status.success() {
            return Ok(());
        }

        count += 1;
        std::thread::sleep(std::time::Duration::from_millis(50));
    }
}

pub fn toggle_nvidia_powerd(run: bool, vendor: GfxVendor) -> Result<(), GfxError> {
    if vendor == GfxVendor::Nvidia {
        let mut cmd = Command::new("systemctl");
        if run {
            cmd.arg("start");
        } else {
            cmd.arg("stop");
        }
        cmd.arg("nvidia-powerd.service");

        let status = cmd.status()?;
        if !status.success() {
            warn!("{run} nvidia-powerd.service failed: {:?}", status.code());
        }
    }
    Ok(())
}

pub fn kill_nvidia_lsof() -> Result<(), GfxError> {
    if !PathBuf::from("/dev/nvidia0").exists() {
        return Ok(());
    }

    let mut cmd = Command::new("lsof");
    cmd.arg("/dev/nvidia0");

    let output = cmd
        .output()
        .map_err(|err| GfxError::Command(format!("{:?}", cmd), err))?;

    let st = String::from_utf8_lossy(&output.stdout);

    for line in st.lines() {
        if let Some(n) = line.split_whitespace().nth(1) {
            if let Ok(n) = n.parse::<u32>() {
                warn!("pid {n} is holding /dev/nvidia0. Killing");
                let mut cmd = Command::new("kill");
                cmd.arg("-9");
                cmd.arg(format!("{n}"));
                let status = cmd
                    .status()
                    .map_err(|err| GfxError::Command(format!("{:?}", cmd), err))?;
                if !status.success() {
                    warn!("Killing pid {n} failed");
                }
            }
        }
    }

    Ok(())
}

pub fn get_kernel_cmdline_mode() -> Result<Option<GfxMode>, GfxError> {
    let path = Path::new(KERNEL_CMDLINE);
    let mut file = OpenOptions::new()
        .read(true)
        .open(path)
        .map_err(|err| GfxError::Path(KERNEL_CMDLINE.to_string(), err))?;
    let mut buf = String::new();
    file.read_to_string(&mut buf)?;

    // No need to be fast here, just check and go
    for cmd in buf.split(' ') {
        if cmd.contains("supergfxd.mode=") {
            let mode = cmd.trim_start_matches("supergfxd.mode=");
            let mode = GfxMode::from_str(mode)?;
            return Ok(Some(mode));
        }
    }

    info!("supergfxd.mode not set, ignoring");
    Ok(None)
}
