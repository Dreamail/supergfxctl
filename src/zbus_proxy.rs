//! # DBus interface proxy for: `org.asuslinux.Gfx`
//!
//! This code was generated by `zbus-xmlgen` `1.0.0` from DBus introspection data.
//! Source: `Interface '/org/supergfxctl/Gfx' from service 'org.asuslinux.Daemon' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://zeenix.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

use crate::pci_device::{GfxMode, GfxPower, GfxRequiredUserAction};

#[dbus_proxy(
    interface = "org.supergfxctl.Daemon",
    default_path = "/org/supergfxctl/Gfx"
)]
trait Daemon {
    /// Version method
    fn version(&self) -> zbus::Result<String>;

    /// Power method
    fn power(&self) -> zbus::Result<GfxPower>;

    /// SetMode method
    fn set_mode(&self, mode: &GfxMode) -> zbus::Result<GfxRequiredUserAction>;

    /// Get the `String` name of the pending mode change if any
    fn pending_mode(&self) -> zbus::Result<GfxMode>;

    /// Get the `String` name of the pending required user action if any
    fn pending_user_action(&self) -> zbus::Result<GfxRequiredUserAction>;

    /// Mode method
    fn mode(&self) -> zbus::Result<GfxMode>;

    fn supported(&self) -> zbus::Result<Vec<GfxMode>>;

    /// Vendor method
    fn vendor(&self) -> zbus::Result<String>;

    /// NotifyAction signal
    #[dbus_proxy(signal)]
    fn notify_action(&self, action: GfxRequiredUserAction) -> zbus::Result<()>;

    /// NotifyGfx signal
    #[dbus_proxy(signal)]
    fn notify_gfx(&self, mode: GfxMode) -> zbus::Result<()>;
}
